.\" Manpage for tpty.
.\" Contact gong_cun@bocmacau.com to correct errors or typos.
.TH tpty 1 "30 March 2017" "1.1" "tpty man page"
.SH NAME
\fBtpty\fP \- tpty execute the program in a terminal session of its own, use
to control the stream through the pseudo terminal.
.SH SYNOPSIS
\fBtpty\fP [ -x -c config ] [ -T timeout -d driver ] [ -einuvXI -o outfile -t
timingfile -a auditfile -p RSAPrivateKey -k EncrypedKey ] program [ args ... ]
.SH DESCRIPTION
\fBtpty\fP based on Mr. Stevens's \fBpty\fP program, and its first function is
to add a pseudo-terminal between the input and ouput of the program to
unbuffer the standard I/O. For example, suppose you are watching the output of
 Background-Running Job, you can disable this automatic buffering as follows:
.nf

        tpty -i \fIprogram\fP </dev/null >file.out &

.fi
Using the \fBtpty\fP, we can implement the \fBscript(1)\fP program as the following
shell script:
.nf

        tpty "${SHELL:-/usr/bin/ksh}" | tee typescript

.fi
or
.nf

        tpty -o typescript "${SHELL:-/usr/bin/ksh}"

.fi
Using the \fBtpty\fP, we can "talk" to the interactive programs
noninteractively
like the \fBexpect(1)\fP.  The option (\fB\-d\fP) allows \fBtpty\fP to be
connected to a driver process for its input and output. The standard output of
the driver is \fBtpty\fP's standard input and vice versa.
.nf

                                                      coprocess
	+---------+   pipe1      +----------+         +-----------+
	| driving |------------->| pseudo   |-------->|stdin      |
	| program |<-------------| terminal |<--------|stdout     |
	+---------+   pipe2      +----------+         +-----------+

.fi
You can write the
.I driver
program yourself like this:
.nf

	% cat driver.sh

	while read line
	do
	    if [[ "$line" = *"'s New password:" ]] || \\
	       [[ "$line" = "Enter the new password again:" ]]
	   then
	       echo "secret"
	   fi
	done

.fi
Then you can run the following command to change password noninteractively:
.nf

	% tpty -n -e -d driver.sh passwd foo

.fi
\fBtpty\fP also provides the option (\fB\-x\fP) for default driver, if use
default driver,
you must specify the config file (\fB\-c\fP). The config file's format like:
.nf

    ExpectString % SendReply % <TptyReserveWords>

.fi
Here is an example using the config file:
.nf

	login: % foo
	foo's Password: % password
	foo@host:[/home/foo]# % date "+%y%m%d"
	foo@host:[/home/foo]# % exit

.fi
The field separator is '%'. Note:
.TP \w'1)\ 'u
1)
If your shell prompt (\fBPS1\fP) or expect string
is '%', 
please be sure to leave a space before the first delimiter, like this:
.nf

	% % whoami

.fi
.B Don't
like this
.nf

	%% whoami

.fi
.TP \w'1)\ 'u
2)
If your command include "%", it's no problem:
.nf

	foo@host:[/home/foo]# % date "+%D"

.fi
.PP
\fBtpty\fP looks for the 
.I ExpectString
in the interactive program's output,
inputs the SendReply if the pattern matched. That means:
.nf

	case Output matched:
		ExpectString1)
			puts SendReply1; break;
		ExpectString2)
			puts SendReply2; break;
		...

.fi
The config file can use the regular expression, since if the
.I ExpectString
has symbol '\fB%\fP', you can use '\fB.\fP' to replace it to avoid confusing
the characters and delimiters.
The symbols and subroutines is from \fBregex(3)\fP. You must precede them with a 
\\ (backslash)
if you want to match the special symbol itself. For example, \\$ matches a dollar sign.
.nf

    login: %foo 
    foo's Password: %password 
    foo@host:[/]# % shell-cmd 
    \fB.*\\[.*\\].*% shell-cmd\fP 
    foo@host:[/]# % exit

.fi
Note, the pattern match do not ignore the \fBBLANK\f.
.PP
The TptyReserveWords
is \fBNONR, REPEAT, INTERACT, ENCRYPT\fP:
.TP
.B NONR
means do not input the newline character ('\\r').
.TP
.B REPAET
.nf
    while (Output matched ExpectString)
        SendReply;
.fi
.TP
\fBINTERACT\fP (must use with \fB\-I\fP option)
.nf

    if (Output matched ExpectString)
            do the rest thing manually;
.fi
.TP
.B ENCRYPT
is added by
.B tpty-crypt(1)
automatically, no need add the keyword manually.
The
.B tpty-crypt(1)
and
.B tpty-keygen(1)
are used to encrypt the sensitive fields of the config file.
You should use
.B tpty-keygen(1)
to generate an RSA keypair with PEM format:
.nf

    $ tpty-keygen ./private.pem
    Generating RSA private key, 2048 bit long modulus
    ...+++
    private key : ./private.pem
    public  key : ./private.pem.pub 

.fi
Then you can encode the config file with
.B tpty-crypt(1)
The syntax is
.nf

    \fBtpty-crypt\fP <FileName> <SegmentName> <PublicKey> <StoreFile>

.fi
The
.I FileName
is the configuration file (\fB-c\fP <file>).
The
.I SegmentName
is which segment you want to encode, like "password" etc.
The
.I StoreFile
is the file which is used to stored the encrypted segment.
For example, The original file is
.nf

    assword: % secret
    .*# % whoami
    .*# % exit

.fi
After executed the following command:
.nf

    $ tpty-crypt config "assword:" private.pem.pub config.key

.fi 
The config file will become:
.nf 

    assword: %<ENCRYPT>
    .# % whoami
    .# % exit

.fi
The encrypted key is stored in config.key.  After the file is encrypted, execute:
.nf

    $ tpty -x -c config -p private.pem -k config.key \\
        telnet remote-host

.fi
.PP
Here is another sample of config file:
.nf

    ogin: %foo
    assword: %secret
    .*# % cat LargeFile | more
    --More--% f % <NONR> % <REPEAT>
    .*# % <INTERACT>

.fi
It means enter the name 'foo' when the login prompt appears, enter the
password 'secret' when the password prompt appears, displays the LargeFile
contents with \fBmore(1)\fP, moves the pages until the end of the file, then
do the rest thing manually.


.SH OPTIONS
Valid options are:
.TP
\fB\-a\fP \fIauditfile\fP
File containing all input from stdin, and the time when the command were
executed. You can run the command:
.nf

    $ col -b <auditfile >auditfile.fix 2>&1

.fi
to cleanup the backspace, or run the
.B vtclean(1)
to cleanup all control characters.
.TP
\fB\-d\fP \fIdriver\fP
Specifies the driver program for stdin/stdout.
.TP
\fB\-e\fP
Does not echo characters for slave pty's line discipline.
.TP
\fB\-c\fP \fIconfig\fP
Specifies the config file with default driver, must use \fB\-c\fP and \fB\-x\fP
 flags together.
.TP
\fB\-i\fP
Ignore EOF on standard input.
.TP
\fB\-k\fP \fIEncryptedKey\fP
Specifies the file which save the encrypted segment of the config file. Only
support the PEM key format with 2048 bits now.
.TP
\fB\-n\fP
No interactive mode, will not initial the window size and termios.
.TP
\fB\-o\fP \fIoutfile\fP
Designates the file to be used for record the program's input and output.
.TP
\fB\-p\fP \fIRSAPrivateKey\fP
Specifies the RSA private key to decrypt the config file.
.TP
\fB\-t\fP \fITimingFile\fP
Output timing data to \fITimingFile\fP.
This data contains two fields, separated by a space.
The first field indicates how much time elapsed since the previous output.
The second field indicates how many characters were output this time.
This information can be used to replay outfile (-o) with realistic typing and 
output delays.
.TP
\fB\-T\fP \fItimeout\fP
If after timeout, none of interactive program's output have been seen, \fBtpty
\fP
will exit. If you don't specify the \fB-x\fP option,
the \fBtimeout\fP will be ignored. Default timeout is 10 seconds. If
\fBtimeout\fP < 0, will wait forever.
.TP
\fB\-u\fP
Unlink the encrypted key file (specified by \fB\-k\fP option).
.TP
\fB\-v\fP
Verbose mode. It only displays the slave pty's device name, not is very helpfu
l for debugging.
.TP
\fB\-x\fP
Choose default driver. Must use \fB\-c\fP and \fB\-x\fP flags together, it will
interpret the config file, drive interactive programs in noninteractive modes.
.TP
\fB\-X\fP
Redirect output to /dev/null if use the default driver.
.TP
\fB\-I\fP
If you don't want to completely automate a task with a driver
(\fB\-d\fP or \fB\-x\fP), the \fB\-I\fP option is to automate
some of it and then do the rest manually.
For example, if the
.I config's
(\fB\-c\fP) content is:
.nf

        assword: %TopSecret
        .*# % <INTERACT>

.fi
When execute:
.nf

	tpty -I -x -c \fIconfig\fP ssh remote-host

.fi
It means after login the shell automatically, do the rest thing manually.

.SH NOTES
Certain interactive commands, such as
\fBvi(1)\fP, create garbage in the outfile (-o).
.B tpty
works best with commands that do not manipulate the screen,
the results are meant to emulate a hardcopy terminal.

.SH Exit Status
This command returns the following exit values:
.TP
\fB0\fP
Successful completion.
.TP
\fB>0\fP
An error occurred.

.SH BUGS
If
.B tpty
with
.B -o
option,
it will place
.I everything
in the output file, including linefeeds and backspaces.  This is not what the
naive user expects. But, you can use some tools to eliminate the garbage
characters, e.g.
.B vtclean(1)
using a state machine to cleanup the escape sequences based on the design
publied by Paul Williams. You can try the command:
.nf

    col -b <record 2>/dev/null | vtclean >record.clean

.fi
.SH HISTORY
.B tpty
The prototype of
.B tpty
was 
.B pty
program written by W. Richard Stevens for APUE.
Cun Gong implemented the default driver for interactive programs 
with other features, was inspired by 
.B expect(1)
and GNU/Linux
.B script(1)
utility.
The
.B tpty
worked on AIX, GNU/Linux and Mac OS X.
.SH SEE ALSO
expect(1), script(1), tptyreplay(1), tty(1), pty(5), regex(3)
.SH PROBLEMS
Problems with
.B tpty
should be reported to <gong_cun@bocmacau.com>
