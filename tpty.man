


     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



     NAME
	  tpty - tpty execute the program in a terminal	session	of its
	  own, use to control the stream through the pseudo terminal.

     SYNOPSIS
	  tpty [ -x -c config ]	[ -T timeout -d	driver ] [ -einuvXI -o
	  outfile -t timingfile	-a auditfile -p	RSAPrivateKey -k
	  EncrypedKey ]	program	[ args ... ]

     DESCRIPTION
	  tpty based on	Mr. Stevens's pty program, and its first
	  function is to add a pseudo-terminal between the input and
	  ouput	of the program to unbuffer the standard	I/O. For
	  example, suppose you are watching the	output of
	   Background-Running Job, you can disable this	automatic
	  buffering as follows:

		  tpty -i program </dev/null >file.out &

	  Using	the tpty, we can implement the script(1) program as
	  the following	shell script:

		  tpty "${SHELL:-/usr/bin/ksh}"	| tee typescript

	  or

		  tpty -o typescript "${SHELL:-/usr/bin/ksh}"

	  Using	the tpty, we can "talk"	to the interactive programs
	  noninteractively like	the expect(1).	The option (-d)	allows
	  tpty to be connected to a driver process for its input and
	  output. The standard output of the driver is tpty's standard
	  input	and vice versa.

								coprocess
	       +---------+   pipe1	+----------+	     +-----------+
	       | driving |------------->| pseudo   |-------->|stdin	 |
	       | program |<-------------| terminal |<--------|stdout	 |
	       +---------+   pipe2	+----------+	     +-----------+

	  You can write	the driver program yourself like this:

	       % cat driver.sh

	       while read line
	       do
		   if [[ "$line" = *"'s	New password:" ]] || \
		      [[ "$line" = "Enter the new password again:" ]]
		  then
		      echo "secret"
		  fi
	       done



     Page 1					    (printed 3/30/17)






     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



	  Then you can run the following command to change password
	  noninteractively:

	       % tpty -n -e -d driver.sh passwd	foo

	  tpty also provides the option	(-x) for default driver, if
	  use default driver, you must specify the config file (-c).
	  The config file's format like:

	      ExpectString % SendReply % <TptyReserveWords>

	  Here is an example using the config file:

	       login: %	foo
	       foo's Password: % password
	       foo@host:[/home/foo]# % date "+%y%m%d"
	       foo@host:[/home/foo]# % exit

	  The field separator is '%'. Note:

	  1) If	your shell prompt (PS1)	or expect string is '%',
	     please be sure to leave a space before the	first
	     delimiter,	like this:

		  % % whoami

	     Don't like	this

		  %% whoami


	  2) If	your command include "%", it's no problem:

		  foo@host:[/home/foo]#	% date "+%D"


	  tpty looks for the ExpectString in the interactive program's
	  output, inputs the SendReply if the pattern matched. That
	  means:

	       case Output matched:
		    ExpectString1)
			 puts SendReply1; break;
		    ExpectString2)
			 puts SendReply2; break;
		    ...

	  The config file can use the regular expression, since	if the
	  ExpectString has symbol '%', you can use '.' to replace it
	  to avoid confusing the characters and	delimiters.  The
	  symbols and subroutines is from regex(3). You	must precede
	  them with a \	(backslash) if you want	to match the special



     Page 2					    (printed 3/30/17)






     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



	  symbol itself. For example, \$ matches a dollar sign.

	      login: %foo
	      foo's Password: %password
	      foo@host:[/]# % shell-cmd
	      .*\[.*\].*% shell-cmd
	      foo@host:[/]# % exit

	  Note,	the pattern match do not ignore	the BLANK

	  The TptyReserveWords is NONR,	REPEAT,	INTERACT, ENCRYPT:

	  NONR means do	not input the newline character	('\r').

	  REPAET
		   while (Output matched ExpectString)
		       SendReply;

	  INTERACT (must use with -I option)

		   if (Output matched ExpectString)
			   do the rest thing manually;

	  ENCRYPT
	       is added	by tpty-crypt(1) automatically,	no need	add
	       the keyword manually.  The tpty-crypt(1)	and tpty-
	       keygen(1) are used to encrypt the sensitive fields of
	       the config file.	 You should use	tpty-keygen(1) to
	       generate	an RSA keypair with PEM	format:

		   $ tpty-keygen ./private.pem
		   Generating RSA private key, 2048 bit	long modulus
		   ...+++
		   private key : ./private.pem
		   public  key : ./private.pem.pub

	       Then you	can encode the config file with	tpty-crypt(1)
	       The syntax is

		   tpty-crypt <FileName> <SegmentName> <PublicKey> <StoreFile>

	       The FileName is the configuration file (-c <file>).
	       The SegmentName is which	segment	you want to encode,
	       like "password" etc.  The StoreFile is the file which
	       is used to stored the encrypted segment.	 For example,
	       The original file is

		   assword: % secret
		   .*# % whoami
		   .*# % exit

	       After executed the following command:



     Page 3					    (printed 3/30/17)






     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



		   $ tpty-crypt	config "assword:" private.pem.pub config.key

	       The config file will become:

		   assword: %<ENCRYPT>
		   .# %	whoami
		   .# %	exit

	       The encrypted key is stored in config.key.  After the
	       file is encrypted, execute:

		   $ tpty -x -c	config -p private.pem -k config.key \
		       telnet remote-host


	  Here is another sample of config file:

	      ogin: %foo
	      assword: %secret
	      .*# % cat	LargeFile | more
	      --More--%	f % <NONR> % <REPEAT>
	      .*# % <INTERACT>

	  It means enter the name 'foo'	when the login prompt appears,
	  enter	the password 'secret' when the password	prompt
	  appears, displays the	LargeFile contents with	more(1), moves
	  the pages until the end of the file, then do the rest	thing
	  manually.



     OPTIONS
	  Valid	options	are:

	  -a auditfile
	       File containing all input from stdin, and the time when
	       the command were	executed. You can run the command:

		   $ col -b <auditfile >auditfile.fix 2>&1

	       to cleanup the backspace, or run	the vtclean(1) to
	       cleanup all control characters.

	  -d driver
	       Specifies the driver program for	stdin/stdout.

	  -e   Does not	echo characters	for slave pty's	line
	       discipline.

	  -c config
	       Specifies the config file with default driver, must use
	       -c and -x



     Page 4					    (printed 3/30/17)






     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



		flags together.

	  -i   Ignore EOF on standard input.

	  -k EncryptedKey
	       Specifies the file which	save the encrypted segment of
	       the config file.	Only support the PEM key format	with
	       2048 bits now.

	  -n   No interactive mode, will not initial the window	size
	       and termios.

	  -o outfile
	       Designates the file to be used for record the program's
	       input and output.

	  -p RSAPrivateKey
	       Specifies the RSA private key to	decrypt	the config
	       file.

	  -t TimingFile
	       Output timing data to TimingFile.  This data contains
	       two fields, separated by	a space.  The first field
	       indicates how much time elapsed since the previous
	       output.	The second field indicates how many characters
	       were output this	time.  This information	can be used to
	       replay outfile (-o) with	realistic typing and output
	       delays.

	  -T timeout
	       If after	timeout, none of interactive program's output
	       have been seen, tpty

	       will exit. If you don't specify the -x option, the
	       timeout will be ignored.	Default	timeout	is 10 seconds.
	       If timeou t < 0,	will wait forever.

	  -u   Unlink the encrypted key	file (specified	by -k option).

	  -v   Verbose mode. It	only displays the slave	pty's device
	       name, not is very helpfu	l for debugging.

	  -x   Choose default driver. Must use -c and -x flags
	       together, it will interpret the config file, drive
	       interactive programs in noninteractive modes.

	  -X   Redirect	output to /dev/null if use the default driver.

	  -I   If you don't want to completely automate	a task with a
	       driver (-d or -x), the -I option	is to automate some of
	       it and then do the rest manually.  For example, if the
	       config's	(-c) content is:



     Page 5					    (printed 3/30/17)






     tpty(1)		    1.1	(30 March 2017)		       tpty(1)



		       assword:	%TopSecret
		       .*# % <INTERACT>

	       When execute:

		    tpty -I -x -c config ssh remote-host

	       It means	after login the	shell automatically, do	the
	       rest thing manually.


     NOTES
	  Certain interactive commands,	such as	vi(1), create garbage
	  in the outfile (-o).	tpty works best	with commands that do
	  not manipulate the screen, the results are meant to emulate
	  a hardcopy terminal.


     Exit Status
	  This command returns the following exit values:

	  0    Successful completion.

	  >0   An error	occurred.


     BUGS
	  If tpty with -o option, it will place	everything in the
	  output file, including linefeeds and backspaces.  This is
	  not what the naive user expects. But,	you can	use some tools
	  to eliminate the garbage characters, e.g.  vtclean(1)	using
	  a state machine to cleanup the escape	sequences based	on the
	  design publied by Paul Williams. You can try the command:

	      vtclean <record |	tr -cs ' \t\n' >record.clean


     HISTORY
	  tpty The prototype of	tpty was pty program written by
	  W.Richard Stevens for	APUE.  Cun Gong	implemented the
	  default driver for interactive programs with other features,
	  was inspired by expect(1) and	GNU/Linux script(1) utility.
	  The tpty worked on AIX, GNU/Linux and	Mac OS X.

     SEE ALSO
	  expect(1), script(1),	tptyreplay(1), tty(1), pty(5),
	  regex(3)

     PROBLEMS
	  Problems with	tpty should be reported	to
	  <gong_cun@bocmacau.com>




     Page 6					    (printed 3/30/17)



